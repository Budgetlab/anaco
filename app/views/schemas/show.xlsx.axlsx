wb = xlsx_package.workbook
s = wb.styles
header_style = wb.styles.add_style(
  bg_color: 'ededed', fg_color: '161616',font_name: 'Calibri', sz: 13, b: true, alignment: { horizontal: :center, vertical: :center }, border: { style: :thick, color: "00" }
)
sub_header_style = wb.styles.add_style(
  bg_color: 'ff', fg_color: '161616',font_name: 'Calibri', sz: 13, b: true, alignment: { horizontal: :center, vertical: :center }, border: { style: :thick, color: "00" }
)
col_header_style = wb.styles.add_style(
                  bg_color: 'fff', fg_color: '161616',font_name: 'Calibri', sz: 13, alignment: {vertical: :center, wrap_text: true  }
                )
cell_style = wb.styles.add_style(
                  bg_color: 'fff', fg_color: '161616',font_name: 'Calibri', sz: 13, alignment: {vertical: :center }
                )
sheet_col = Array.new(40, 14)
if @vision_rprog_ht2
 wb.add_worksheet(name: "HT2") do |sheet|
    sheet.add_row [nil,nil, "Situation à date", nil, nil, nil, nil,nil, nil, nil, nil, nil,
    "Hypothèses de couverture", nil, nil, nil, nil, nil, nil,nil, nil, nil, nil, nil, nil,nil, nil, nil,nil,nil,
    "Autres informations relatives à la fin de gestion", nil, nil,nil,nil,nil, "Commentaire" ], style: header_style, height: 50
    sheet.merge_cells("A1:B1")
    sheet.merge_cells("C1:L1")
    sheet.merge_cells("M1:AD1")
    sheet.merge_cells("AE1:AJ1")

    sheet.add_row [nil, nil, "Ressources certaines à date", nil, "Prévision de dépense", nil, "Solde prévisionnel", nil, "Niveau de la mise en réserve", nil, "Autre cas de réserve de crédits", nil,
    "Mobilisation de la mise en réserve", nil, "Mobilisation des autres cas de réserve", nil, "Fongibilité asymétrique", nil, "Virements/transferts entrants", nil, "Virements/transferts sortants", nil, "Décret d'avance", nil, "Ouverture/Annulation de crédits en LFG", nil, "Reports arbitrés ou consensuels", nil, "Solde final", nil,
    "Prévision de charges à payer", nil, "Autres reports de charge",nil, "Crédits à reporter", nil, nil], style: sub_header_style, height: 40
    sheet.merge_cells("A2:B2")
    sheet.merge_cells("C2:D2")
    sheet.merge_cells("E2:F2")
    sheet.merge_cells("G2:H2")
    sheet.merge_cells("I2:J2")
    sheet.merge_cells("K2:L2")
    sheet.merge_cells("M2:N2")
    sheet.merge_cells("O2:P2")
    sheet.merge_cells("Q2:R2")
    sheet.merge_cells("S2:T2")
    sheet.merge_cells("U2:V2")
    sheet.merge_cells("W2:X2")
    sheet.merge_cells("Y2:Z2")
    sheet.merge_cells("AA2:AB2")
    sheet.merge_cells("AC2:AD2")
    sheet.merge_cells("AE2:AF2")
    sheet.merge_cells("AG2:AH2")
    sheet.merge_cells("AI2:AJ2")

    sheet.add_row ["Programme", "Vision", "AE (€)", "CP (€)", "AE (€)", "CP (€)", "AE (€)", "CP (€)","AE (€)", "CP (€)","AE (€)", "CP (€)",
    "AE (€)", "CP (€)","AE (€)", "CP (€)","AE (€)", "CP (€)","AE (€)", "CP (€)","AE (€)", "CP (€)","AE (€)", "CP (€)","AE (€)", "CP (€)","AE (€)", "CP (€)","AE (€)", "CP (€)",
    "AE (€)", "CP (€)","AE (€)", "CP (€)","AE (€)", "CP (€)",nil], style: col_header_style, height: 30

    sheet.auto_filter = "A3:B3"
    length_table = 5

    sheet.add_row [@schema.programme.numero, "RPROG", @vision_rprog_ht2.ressources_ae, @vision_rprog_ht2.ressources_cp, @vision_rprog_ht2.depenses_ae, @vision_rprog_ht2.depenses_cp, @vision_rprog_ht2.prevision_solde_budgetaire_ae , @vision_rprog_ht2.prevision_solde_budgetaire_cp, @vision_rprog_ht2.mer_ae, @vision_rprog_ht2.mer_cp, @vision_rprog_ht2.surgel_ae, @vision_rprog_ht2.surgel_cp,
    @vision_rprog_ht2.mobilisation_mer_ae, @vision_rprog_ht2.mobilisation_mer_cp, @vision_rprog_ht2.mobilisation_surgel_ae, @vision_rprog_ht2.mobilisation_surgel_cp, @vision_rprog_ht2.fongibilite_ae , @vision_rprog_ht2.fongibilite_cp, @vision_rprog_ht2.transferts_entrant_ae , @vision_rprog_ht2.transferts_entrant_cp, @vision_rprog_ht2.transferts_sortant_ae , @vision_rprog_ht2.transferts_sortant_ae, @vision_rprog_ht2.decret_ae , @vision_rprog_ht2.decret_cp, @vision_rprog_ht2.credits_lfg_ae, @vision_rprog_ht2.credits_lfg_cp, @vision_rprog_ht2.reports_ae , @vision_rprog_ht2.reports_cp , @vision_rprog_ht2.solde_total_ae, @vision_rprog_ht2.solde_total_cp,
    @vision_rprog_ht2.charges_a_payer_ae , @vision_rprog_ht2.charges_a_payer_cp, @vision_rprog_ht2.reports_autre_ae, @vision_rprog_ht2.reports_autre_cp, @vision_rprog_ht2.credits_reports_ae, @vision_rprog_ht2.credits_reports_cp, @vision_rprog_ht2.commentaire], style: cell_style

    sheet.add_row [@schema.programme.numero, "CBCM", @vision_cbcm_ht2.ressources_ae, @vision_cbcm_ht2.ressources_cp, @vision_cbcm_ht2.depenses_ae, @vision_cbcm_ht2.depenses_cp, @vision_cbcm_ht2.prevision_solde_budgetaire_ae , @vision_cbcm_ht2.prevision_solde_budgetaire_cp, @vision_cbcm_ht2.mer_ae, @vision_cbcm_ht2.mer_cp, @vision_cbcm_ht2.surgel_ae, @vision_cbcm_ht2.surgel_cp,
    @vision_cbcm_ht2.mobilisation_mer_ae, @vision_cbcm_ht2.mobilisation_mer_cp, @vision_cbcm_ht2.mobilisation_surgel_ae, @vision_cbcm_ht2.mobilisation_surgel_cp, @vision_cbcm_ht2.fongibilite_ae , @vision_cbcm_ht2.fongibilite_cp, @vision_cbcm_ht2.transferts_entrant_ae , @vision_cbcm_ht2.transferts_entrant_cp, @vision_cbcm_ht2.transferts_sortant_ae , @vision_cbcm_ht2.transferts_sortant_ae, @vision_cbcm_ht2.decret_ae , @vision_cbcm_ht2.decret_cp, @vision_cbcm_ht2.credits_lfg_ae, @vision_cbcm_ht2.credits_lfg_cp, @vision_cbcm_ht2.reports_ae , @vision_cbcm_ht2.reports_cp , @vision_cbcm_ht2.solde_total_ae, @vision_cbcm_ht2.solde_total_cp,
    @vision_cbcm_ht2.charges_a_payer_ae , @vision_cbcm_ht2.charges_a_payer_cp, @vision_cbcm_ht2.reports_autre_ae, @vision_cbcm_ht2.reports_autre_cp, @vision_cbcm_ht2.credits_reports_ae, @vision_cbcm_ht2.credits_reports_cp, @vision_cbcm_ht2.commentaire], style: cell_style


    sheet.add_border ["A3:A#{length_table}","B3:B#{length_table}","D3:D#{length_table}","F3:F#{length_table}","H3:H#{length_table}","J3:J#{length_table}","L3:L#{length_table}", "N3:N#{length_table}", "P3:P#{length_table}","R3:R#{length_table}", "T3:T#{length_table}", "V3:V#{length_table}", "X3:X#{length_table}", "Z3:Z#{length_table}", "AB3:AB#{length_table}", "AD3:AD#{length_table}","AF3:AF#{length_table}", "AH3:AH#{length_table}","AJ3:AJ#{length_table}","AK3:AK#{length_table}"], { edges: [:right], style: :thick }
    sheet.add_border "A3:AK#3", { edges: [:bottom], style: :thick }
    sheet.add_border "A{length_table}:AK#{length_table}", { edges: [:bottom], style: :thick }


    sheet.add_style ["C4:AJ#{length_table}"], num_fmt: 1
    sheet.column_widths(*sheet_col)

    color_cells(sheet, "G4:H#{length_table}")
    color_cells(sheet, "AC4:AD#{length_table}")


 end

 wb.add_worksheet(name: "Virements transferts HT2") do |sheet|
    sheet.add_row ["Virements/transferts entrants", "Vision RPROG", nil,nil, "Vision CBCM", nil, nil], style: header_style, height: 50
    sheet.merge_cells("B1:D1")
    sheet.merge_cells("E1:G1")

    sheet.add_row [nil,"Programme", "AE (€)", "CP (€)", "Programme", "AE (€)", "CP (€)"], style: col_header_style, height: 40
    rprog_data = @vision_rprog_ht2.transferts.entrant.map do |transfert|
        [transfert.programme.numero, transfert.montant_ae, transfert.montant_cp]
    end

    cbcm_data = @vision_cbcm_ht2.transferts.entrant.map do |transfert|
        [transfert.programme.numero, transfert.montant_ae, transfert.montant_cp]
    end

    # Normalize data arrays to be of the same length
    [rprog_data, cbcm_data].each { |data| data << [nil, nil, nil] while data.length < [rprog_data.length, cbcm_data.length].max }
    length_dv = [rprog_data.length, cbcm_data.length].max + 2 || 2

    # Combine and insert data into the sheet
    rprog_data.zip(cbcm_data).each do |rprog_row, cbcm_row|
        sheet.add_row [nil] + rprog_row + cbcm_row, style: cell_style
    end

    sheet.add_row ["Total", nil, @vision_rprog_ht2.transferts_entrant_ae, @vision_rprog_ht2.transferts_entrant_cp, nil, @vision_cbcm_ht2.transferts_entrant_ae, @vision_cbcm_ht2.transferts_entrant_cp], style: cell_style

    sheet.add_row
    sheet.add_row
    sheet.add_row ["Virements/transferts sortants", "Vision RPROG", nil,nil, "Vision CBCM", nil, nil], style: header_style, height: 50
    sheet.merge_cells("B#{length_dv+4}:D#{length_dv+4}")
    sheet.merge_cells("E#{length_dv+4}:G#{length_dv+4}")

    sheet.add_row [nil,"Programme", "AE (€)", "CP (€)", "Programme", "AE (€)", "CP (€)"], style: col_header_style, height: 40
    rprog_data_sortant = @vision_rprog_ht2.transferts.sortant.map do |transfert|
        [transfert.programme.numero, transfert.montant_ae, transfert.montant_cp]
    end

    cbcm_data_sortant = @vision_cbcm_ht2.transferts.sortant.map do |transfert|
        [transfert.programme.numero, transfert.montant_ae, transfert.montant_cp]
    end

    # Normalize data arrays to be of the same length
    [rprog_data_sortant, cbcm_data_sortant].each { |data| data << [nil, nil, nil] while data.length < [rprog_data_sortant.length, cbcm_data_sortant.length].max }
    length_dt = [rprog_data_sortant.length, cbcm_data_sortant.length].max + 2 || 2

    # Combine and insert data into the sheet
    rprog_data_sortant.zip(cbcm_data_sortant).each do |rprog_row, cbcm_row|
        sheet.add_row [nil] + rprog_row + cbcm_row, style: cell_style
    end

    sheet.add_row ["Total", nil, @vision_rprog_ht2.transferts_sortant_ae, @vision_rprog_ht2.transferts_sortant_cp, nil, @vision_cbcm_ht2.transferts_sortant_ae, @vision_cbcm_ht2.transferts_sortant_cp], style: cell_style


    sheet.column_widths(*sheet_col)
    sheet.add_border ["B2:G2","A#{length_dv}:G#{length_dv}", "A#{length_dv+1}:G#{length_dv+1}","B#{length_dv+5}:G#{length_dv+5}", "A#{length_dv+length_dt+3}:G#{length_dv+length_dt+3}","A#{length_dv+1+length_dt+3}:G#{length_dv+1+length_dt+3}"], { edges: [:bottom], style: :thick }
    sheet.add_border ["A2:A#{length_dv+1}","D2:D#{length_dv+1}","G2:G#{length_dv+1}", "A#{length_dv+5}:A#{length_dv+1+length_dt+3}","D#{length_dv+5}:D#{length_dv+1+length_dt+3}","G#{length_dv+5}:G#{length_dv+1+length_dt+3}"], { edges: [:right], style: :thick }
    sheet.add_style ["A#{length_dv+1}:G#{length_dv+1}", "A#{length_dv+1+length_dt+3}:G#{length_dv+1+length_dt+3}"], bg_color: "dae1f2"
    sheet.add_style ["C3:D#{length_dv+1}", "F3:G#{length_dv+1}", "C#{length_dv+5}:D#{length_dv+1+length_dt+3}", "F#{length_dv+5}:G#{length_dv+1+length_dt+3}"], num_fmt: 1

 end
end

if @vision_rprog_t2
wb.add_worksheet(name: "T2") do |sheet|
    sheet.add_row [nil,nil, "Situation à date", nil, nil, nil, nil,nil, nil, nil, nil, nil,
    "Hypothèses de couverture", nil, nil, nil, nil, nil, nil,nil, nil, nil, nil, nil, nil,nil, nil, nil,nil,nil, "Commentaire" ], style: header_style, height: 50
    sheet.merge_cells("A1:B1")
    sheet.merge_cells("C1:L1")
    sheet.merge_cells("M1:AD1")

    sheet.add_row [nil, nil, "Ressources certaines à date", nil, "Prévision de dépense", nil, "Solde prévisionnel", nil, "Niveau de la mise en réserve", nil, "Autre cas de réserve de crédits", nil,
    "Mobilisation de la mise en réserve", nil, "Mobilisation des autres cas de réserve", nil, "Fongibilité asymétrique", nil, "Virements/transferts entrants", nil, "Virements/transferts sortants", nil, "Décret d'avance", nil, "Ouverture/Annulation de crédits en LFG", nil, "Reports arbitrés ou consensuels", nil, "Solde final", nil, nil], style: sub_header_style, height: 40
    sheet.merge_cells("A2:B2")
    sheet.merge_cells("C2:D2")
    sheet.merge_cells("E2:F2")
    sheet.merge_cells("G2:H2")
    sheet.merge_cells("I2:J2")
    sheet.merge_cells("K2:L2")
    sheet.merge_cells("M2:N2")
    sheet.merge_cells("O2:P2")
    sheet.merge_cells("Q2:R2")
    sheet.merge_cells("S2:T2")
    sheet.merge_cells("U2:V2")
    sheet.merge_cells("W2:X2")
    sheet.merge_cells("Y2:Z2")
    sheet.merge_cells("AA2:AB2")
    sheet.merge_cells("AC2:AD2")

    sheet.add_row ["Programme", "Vision", "HCAS (€)", "CAS (€)", "HCAS (€)","CAS (€)", "HCAS (€)","CAS (€)", "HCAS (€)","CAS (€)", "HCAS (€)",
    "CAS (€)", "HCAS (€)", "CAS (€)", "HCAS (€)","CAS (€)", "HCAS (€)", "CAS (€)", "HCAS (€)","CAS (€)", "HCAS (€)", "CAS (€)", "HCAS (€)","CAS (€)", "HCAS (€)", "CAS (€)", "HCAS (€)","CAS (€)", "HCAS (€)","CAS (€)",nil], style: col_header_style, height: 30

    sheet.auto_filter = "A3:B3"
    length_table = 5

    sheet.add_row [@schema.programme.numero, "RPROG", @vision_rprog_t2.ressources_ae, @vision_rprog_t2.ressources_cp, @vision_rprog_t2.depenses_ae, @vision_rprog_t2.depenses_cp, @vision_rprog_t2.prevision_solde_budgetaire_ae , @vision_rprog_t2.prevision_solde_budgetaire_cp, @vision_rprog_t2.mer_ae, @vision_rprog_t2.mer_cp, @vision_rprog_t2.surgel_ae, @vision_rprog_t2.surgel_cp,
    @vision_rprog_t2.mobilisation_mer_ae, @vision_rprog_t2.mobilisation_mer_cp, @vision_rprog_t2.mobilisation_surgel_ae, @vision_rprog_t2.mobilisation_surgel_cp, @vision_rprog_t2.fongibilite_ae , @vision_rprog_t2.fongibilite_cp, @vision_rprog_t2.transferts_entrant_ae , @vision_rprog_t2.transferts_entrant_cp, @vision_rprog_t2.transferts_sortant_ae , @vision_rprog_t2.transferts_sortant_ae, @vision_rprog_t2.decret_ae , @vision_rprog_t2.decret_cp, @vision_rprog_t2.credits_lfg_ae, @vision_rprog_t2.credits_lfg_cp, @vision_rprog_t2.reports_ae , @vision_rprog_t2.reports_cp , @vision_rprog_t2.solde_total_ae, @vision_rprog_t2.solde_total_cp, @vision_rprog_t2.commentaire], style: cell_style

    sheet.add_row [@schema.programme.numero, "CBCM", @vision_cbcm_t2.ressources_ae, @vision_cbcm_t2.ressources_cp, @vision_cbcm_t2.depenses_ae, @vision_cbcm_t2.depenses_cp, @vision_cbcm_t2.prevision_solde_budgetaire_ae , @vision_cbcm_t2.prevision_solde_budgetaire_cp, @vision_cbcm_t2.mer_ae, @vision_cbcm_t2.mer_cp, @vision_cbcm_t2.surgel_ae, @vision_cbcm_t2.surgel_cp,
    @vision_cbcm_t2.mobilisation_mer_ae, @vision_cbcm_t2.mobilisation_mer_cp, @vision_cbcm_t2.mobilisation_surgel_ae, @vision_cbcm_t2.mobilisation_surgel_cp, @vision_cbcm_t2.fongibilite_ae , @vision_cbcm_t2.fongibilite_cp, @vision_cbcm_t2.transferts_entrant_ae , @vision_cbcm_t2.transferts_entrant_cp, @vision_cbcm_t2.transferts_sortant_ae , @vision_cbcm_t2.transferts_sortant_ae, @vision_cbcm_t2.decret_ae , @vision_cbcm_t2.decret_cp, @vision_cbcm_t2.credits_lfg_ae, @vision_cbcm_t2.credits_lfg_cp, @vision_cbcm_t2.reports_ae , @vision_cbcm_t2.reports_cp , @vision_cbcm_t2.solde_total_ae, @vision_cbcm_t2.solde_total_cp, @vision_cbcm_t2.commentaire], style: cell_style


    sheet.add_border ["A3:A#{length_table}","B3:B#{length_table}","D3:D#{length_table}","F3:F#{length_table}","H3:H#{length_table}","J3:J#{length_table}","L3:L#{length_table}", "N3:N#{length_table}", "P3:P#{length_table}","R3:R#{length_table}", "T3:T#{length_table}", "V3:V#{length_table}", "X3:X#{length_table}", "Z3:Z#{length_table}", "AB3:AB#{length_table}", "AD3:AD#{length_table}", "AE3:AE#{length_table}"], { edges: [:right], style: :thick }
    sheet.add_border "A3:AE#3", { edges: [:bottom], style: :thick }
    sheet.add_border "A{length_table}:AE#{length_table}", { edges: [:bottom], style: :thick }

    sheet.add_style ["G4:H#{length_table}","AC4:AD#{length_table}"], bg_color: 'dae1f2'
    sheet.add_style ["C4:AD#{length_table}"], num_fmt: 1
    sheet.column_widths(*sheet_col)

    color_cells(sheet, "G4:H#{length_table}")
    color_cells(sheet, "AC4:AD#{length_table}")

 end

 wb.add_worksheet(name: "Virements transferts T2") do |sheet|
     sheet.add_row ["Virements/transferts entrants", "Vision RPROG", nil,nil, "Vision CBCM", nil, nil], style: header_style, height: 50
     sheet.merge_cells("B1:D1")
     sheet.merge_cells("E1:G1")

     sheet.add_row [nil,"Programme", "AE (€)", "CP (€)", "Programme", "AE (€)", "CP (€)"], style: col_header_style, height: 40
     rprog_data = @vision_rprog_t2.transferts.entrant.map do |transfert|
         [transfert.programme.numero, transfert.montant_ae, transfert.montant_cp]
     end

     cbcm_data = @vision_cbcm_t2.transferts.entrant.map do |transfert|
         [transfert.programme.numero, transfert.montant_ae, transfert.montant_cp]
     end

     # Normalize data arrays to be of the same length
     [rprog_data, cbcm_data].each { |data| data << [nil, nil, nil] while data.length < [rprog_data.length, cbcm_data.length].max }
     length_dv = [rprog_data.length, cbcm_data.length].max + 2 || 2

     # Combine and insert data into the sheet
     rprog_data.zip(cbcm_data).each do |rprog_row, cbcm_row|
         sheet.add_row [nil] + rprog_row + cbcm_row, style: cell_style
     end

     sheet.add_row ["Total", nil, @vision_rprog_t2.transferts_entrant_ae, @vision_rprog_t2.transferts_entrant_cp, nil, @vision_cbcm_t2.transferts_entrant_ae, @vision_cbcm_t2.transferts_entrant_cp], style: cell_style

     sheet.add_row
     sheet.add_row
     sheet.add_row ["Virements/transferts sortants", "Vision RPROG", nil,nil, "Vision CBCM", nil, nil], style: header_style, height: 50
     sheet.merge_cells("B#{length_dv+4}:D#{length_dv+4}")
     sheet.merge_cells("E#{length_dv+4}:G#{length_dv+4}")

     sheet.add_row [nil,"Programme", "AE (€)", "CP (€)", "Programme", "AE (€)", "CP (€)"], style: col_header_style, height: 40
     rprog_data_sortant = @vision_rprog_t2.transferts.sortant.map do |transfert|
         [transfert.programme.numero, transfert.montant_ae, transfert.montant_cp]
     end

     cbcm_data_sortant = @vision_cbcm_t2.transferts.sortant.map do |transfert|
         [transfert.programme.numero, transfert.montant_ae, transfert.montant_cp]
     end

     # Normalize data arrays to be of the same length
     [rprog_data_sortant, cbcm_data_sortant].each { |data| data << [nil, nil, nil] while data.length < [rprog_data_sortant.length, cbcm_data_sortant.length].max }
     length_dt = [rprog_data_sortant.length, cbcm_data_sortant.length].max + 2 || 2

     # Combine and insert data into the sheet
     rprog_data_sortant.zip(cbcm_data_sortant).each do |rprog_row, cbcm_row|
         sheet.add_row [nil] + rprog_row + cbcm_row, style: cell_style
     end

     sheet.add_row ["Total", nil, @vision_rprog_t2.transferts_sortant_ae, @vision_rprog_t2.transferts_sortant_cp, nil, @vision_cbcm_t2.transferts_sortant_ae, @vision_cbcm_t2.transferts_sortant_cp], style: cell_style


     sheet.column_widths(*sheet_col)
     sheet.add_border ["B2:G2","A#{length_dv}:G#{length_dv}", "A#{length_dv+1}:G#{length_dv+1}","B#{length_dv+5}:G#{length_dv+5}", "A#{length_dv+length_dt+3}:G#{length_dv+length_dt+3}","A#{length_dv+1+length_dt+3}:G#{length_dv+1+length_dt+3}"], { edges: [:bottom], style: :thick }
     sheet.add_border ["A2:A#{length_dv+1}","D2:D#{length_dv+1}","G2:G#{length_dv+1}", "A#{length_dv+5}:A#{length_dv+1+length_dt+3}","D#{length_dv+5}:D#{length_dv+1+length_dt+3}","G#{length_dv+5}:G#{length_dv+1+length_dt+3}"], { edges: [:right], style: :thick }
     sheet.add_style ["A#{length_dv+1}:G#{length_dv+1}", "A#{length_dv+1+length_dt+3}:G#{length_dv+1+length_dt+3}"], bg_color: "dae1f2"
     sheet.add_style ["C3:D#{length_dv+1}", "F3:G#{length_dv+1}", "C#{length_dv+5}:D#{length_dv+1+length_dt+3}", "F#{length_dv+5}:G#{length_dv+1+length_dt+3}"], num_fmt: 1

  end

end