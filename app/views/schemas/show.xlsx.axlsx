wb = xlsx_package.workbook
s = wb.styles
header_style = wb.styles.add_style(
  bg_color: 'ededed', fg_color: '161616',font_name: 'Calibri', sz: 13, b: true, alignment: { horizontal: :center, vertical: :center }, border: { style: :thick, color: "00" }
)
sub_header_style = wb.styles.add_style(
  bg_color: 'ff', fg_color: '161616',font_name: 'Calibri', sz: 13, b: true, alignment: { horizontal: :center, vertical: :center }, border: { style: :thick, color: "00" }
)
col_header_style = wb.styles.add_style(
                  bg_color: 'fff', fg_color: '161616',font_name: 'Calibri', sz: 13, alignment: {vertical: :center, wrap_text: true  }
                )
cell_style = wb.styles.add_style(
                  bg_color: 'fff', fg_color: '161616',font_name: 'Calibri', sz: 13, alignment: {vertical: :center }
                )
cell_style_grey = wb.styles.add_style(
                  bg_color: 'dedede', fg_color: '161616',font_name: 'Calibri', sz: 13, alignment: {vertical: :center }
                )
sheet_col = Array.new(40, 14)
data_array_ht2 = [ # Votre tableau de données à partir du code HTML.
  { title: 'Ressources certaines à date', ae_attr: 'ressources_ae', cp_attr: 'ressources_cp' },
  { title: 'Prévision de dépense', ae_attr: 'depenses_ae', cp_attr: 'depenses_cp' },
  { title: 'Solde prévisionnel', ae_attr: 'prevision_solde_budgetaire_ae', cp_attr: 'prevision_solde_budgetaire_cp' },
  { title: "Reports arbitrés ou consensuels", ae_attr: 'reports_ae', cp_attr: 'reports_cp' },
  { title: "Solde prévisionnel corrigé des reports arbitrés ou consensuels", ae_attr: 'solde_prev_reports_ae', cp_attr: 'solde_prev_reports_cp' },
  { title: 'Niveau de la mise en réserve', ae_attr: 'mer_ae', cp_attr: 'mer_cp' },
  { title: 'Autre cas de réserve de crédits', ae_attr: 'surgel_ae', cp_attr: 'surgel_cp' },
  { title: 'Mobilisation de la mise en réserve', ae_attr: 'mobilisation_mer_ae', cp_attr: 'mobilisation_mer_cp' },
  { title: 'Mobilisation des autres cas de réserve', ae_attr: 'mobilisation_surgel_ae', cp_attr: 'mobilisation_surgel_cp' },
  { title: 'Fongibilité asymétrique', ae_attr: 'fongibilite_ae', cp_attr: 'fongibilite_cp' },
  { title: 'Virements/transferts entrants', ae_attr: 'transferts_entrant_ae', cp_attr: 'transferts_entrant_cp' },
  { title: 'Virements/transferts sortants', ae_attr: 'transferts_sortant_ae', cp_attr: 'transferts_sortant_cp' },
  { title: "Décret d'avance", ae_attr: 'decret_ae', cp_attr: 'decret_cp' },
  { title: "Ouverture/Annulation de crédits en LFG", ae_attr: 'credits_lfg_ae', cp_attr: 'credits_lfg_cp' },
  { title: 'Solde final', ae_attr: 'solde_total_ae', cp_attr: 'solde_total_cp' },
  { title: 'Prévision de charges à payer', ae_attr: 'charges_a_payer_ae', cp_attr: 'charges_a_payer_cp' },
  { title: 'Autres reports de charge', ae_attr: 'reports_autre_ae', cp_attr: 'reports_autre_cp' },
  { title: 'Crédits à reporter', ae_attr: 'credits_reports_ae', cp_attr: 'credits_reports_cp' },
]
data_array_t2 = [ # Votre tableau de données à partir du code HTML.
  { title: 'Ressources certaines à date', ae_attr: 'ressources_ae', cp_attr: 'ressources_cp' },
  { title: 'Prévision de dépense', ae_attr: 'depenses_ae', cp_attr: 'depenses_cp' },
  { title: 'Solde prévisionnel', ae_attr: 'prevision_solde_budgetaire_ae', cp_attr: 'prevision_solde_budgetaire_cp' },
  { title: 'Niveau de la mise en réserve', ae_attr: 'mer_ae', cp_attr: 'mer_cp' },
  { title: 'Autre cas de réserve de crédits', ae_attr: 'surgel_ae', cp_attr: 'surgel_cp' },
  { title: 'Mobilisation de la mise en réserve', ae_attr: 'mobilisation_mer_ae', cp_attr: 'mobilisation_mer_cp' },
  { title: 'Mobilisation des autres cas de réserve', ae_attr: 'mobilisation_surgel_ae', cp_attr: 'mobilisation_surgel_cp' },
  { title: 'Fongibilité asymétrique', ae_attr: 'fongibilite_ae', cp_attr: 'fongibilite_cp' },
  { title: 'Fongibilité HCAS/CAS', ae_attr: 'fongibilite_hcas', cp_attr: 'fongibilite_cas' },
  { title: 'Virements/transferts entrants', ae_attr: 'transferts_entrant_ae', cp_attr: 'transferts_entrant_cp' },
  { title: 'Virements/transferts sortants', ae_attr: 'transferts_sortant_ae', cp_attr: 'transferts_sortant_cp' },
  { title: "Décret d'avance", ae_attr: 'decret_ae', cp_attr: 'decret_cp' },
  { title: "Ouverture/Annulation de crédits en LFG", ae_attr: 'credits_lfg_ae', cp_attr: 'credits_lfg_cp' },
  { title: 'Solde final', ae_attr: 'solde_total_ae', cp_attr: 'solde_total_cp' },
]
programme_numero = @schema.programme.numero
['HT2', 'T2'].each do |vision|
  vision_rprog = find_gestion_schema_vision(@gestion_schemas, "RPROG", vision)
  vision_cbcm = find_gestion_schema_vision(@gestion_schemas, "CBCM", vision)
  ae = vision == 'HT2' ? "AE" : "HCAS"
  cp = vision == 'HT2' ? "CP" : "CAS"
  data_array = vision == 'HT2' ? data_array_ht2 : data_array_t2
  if vision_rprog
      wb.add_worksheet(name: vision) do |sheet|

        # Les headers de vos colonnes.
        sheet.add_row ["Vision #{vision} P#{programme_numero}", "Vision RPROG", nil, "Vision CBCM", nil], style: header_style, height: 50
        sheet.merge_cells("B1:C1")
        sheet.merge_cells("D1:E1")

        sheet.add_row [nil, "#{ae} (€)", "#{cp} (€)", "#{ae} (€)", "#{cp} (€)"], style: sub_header_style, height: 40
        sheet.merge_cells("A1:A2")
        length_table = vision == 'HT2' ? 20 : 16
        total_length = vision == 'HT2' ? 17 : 16
        data_array.each do |item|
            row = [
              item[:title],
              format_number(vision_rprog.send(item[:ae_attr])),
              format_number(vision_rprog.send(item[:cp_attr])),
              format_number(vision_cbcm.send(item[:ae_attr])),
              format_number(vision_cbcm.send(item[:cp_attr])),
            ]
            sheet.add_row row, style: cell_style
        end
        sheet.add_row ["Commentaire", vision_rprog.commentaire, nil, vision_cbcm.commentaire, nil], style: cell_style
        sheet.merge_cells("B#{length_table+1}:C#{length_table+1}")
        sheet.merge_cells("D#{length_table+1}:E#{length_table+1}")

        sheet.add_border ["A3:A#{length_table}","E3:E#{length_table}","C3:C#{length_table}"], { edges: [:right], style: :thick }
        sheet.add_border ["A9:E9","A#{total_length-1}:E#{total_length-1}","A#{total_length}:E#{total_length}","A#{length_table}:E#{length_table}"], { edges: [:bottom], style: :thick }

        sheet.add_style ["B3:E#{length_table}"], num_fmt: 1
        sheet.add_style "A#{total_length}:E#{total_length}", bg_color: 'dae1f2'

        color_cells(sheet, "B#{total_length}:E#{total_length}")
        (1..4).each do |col|
          sheet.column_info[col].width = 20
        end
      end

      wb.add_worksheet(name: "#{vision}_format_COL") do |sheet|
          # Create header row with titles
                      header_row = ["Vision #{vision}"]
                      sub_header_row = ["P #{programme_numero}"]
                      data_array.each do |item|
                          header_row << "#{item[:title]}"
                          header_row << nil
                          sub_header_row << "#{ae} (€)"
                          sub_header_row << "#{cp} (€)"
                      end
                      header_row << "Commentaire"
                      sub_header_row << nil
                      sheet.add_row header_row, style: header_style, height: 50
                      sheet.add_row sub_header_row, style: sub_header_style, height: 40
                      length_table = 4
                      max_col = vision == "HT2" ? 'AK' : 'AC'
                      range = ("B".."Z")
                      range2 = ("AB".."#{max_col}")
                      range.step(2).each do |c|
                        puts "#{c}1:#{c.succ}1"
                        sheet.merge_cells("#{c}1:#{c.succ}1")
                      end
                      range2.step(2).each do |c|
                        puts "#{c}1:#{c.succ}1"
                        sheet.merge_cells("#{c}1:#{c.succ}1")
                      end

                      # Add RPROG data
                      rprog_row = ['RPROG']
                      data_array.each do |item|
                          rprog_row << format_number(vision_rprog.send(item[:ae_attr]))
                          rprog_row << format_number(vision_rprog.send(item[:cp_attr]))
                      end
                      rprog_row << vision_rprog.commentaire
                      sheet.add_row rprog_row, style: cell_style

                      # Add CBCM data
                      cbcm_row = ['CBCM']
                      data_array.each do |item|
                          cbcm_row << format_number(vision_cbcm.send(item[:ae_attr]))
                          cbcm_row << format_number(vision_cbcm.send(item[:cp_attr]))
                      end
                      cbcm_row << vision_cbcm.commentaire
                      sheet.add_row cbcm_row, style: cell_style

                      sheet.add_style ["C3:#{max_col}#{length_table}"], num_fmt: 1
                      sheet.add_style ["A4:#{max_col}4"], bg_color: 'dedede'
                      solde_col = vision == "HT2" ? "AD3:AE4" : "AB3:AC4"
                      color_cells(sheet, solde_col)
          sheet.column_widths(*sheet_col)

      end

      wb.add_worksheet(name: "Virements_transferts_#{vision}") do |sheet|
          sheet.add_row ["Virements/transferts entrants", "Vision RPROG", nil,nil, "Vision CBCM", nil, nil], style: header_style, height: 50
          sheet.merge_cells("B1:D1")
          sheet.merge_cells("E1:G1")

          sheet.add_row [nil,"Programme", "#{ae} (€)", "#{cp} (€)", "Programme", "#{ae} (€)", "#{cp} (€)"], style: col_header_style, height: 40
          rprog_data = vision_rprog.transferts.entrant.map do |transfert|
              [transfert.programme.numero, transfert.montant_ae, transfert.montant_cp]
          end

          cbcm_data = vision_cbcm.transferts.entrant.map do |transfert|
              [transfert.programme.numero, transfert.montant_ae, transfert.montant_cp]
          end

          # Normalize data arrays to be of the same length
          [rprog_data, cbcm_data].each { |data| data << [nil, nil, nil] while data.length < [rprog_data.length, cbcm_data.length].max }
          length_dv = [rprog_data.length, cbcm_data.length].max + 2 || 2

          # Combine and insert data into the sheet
          rprog_data.zip(cbcm_data).each do |rprog_row, cbcm_row|
              sheet.add_row [nil] + rprog_row + cbcm_row, style: cell_style
          end

          sheet.add_row ["Total", nil, vision_rprog.transferts_entrant_ae, vision_rprog.transferts_entrant_cp, nil, vision_cbcm.transferts_entrant_ae, vision_cbcm.transferts_entrant_cp], style: cell_style

          sheet.add_row
          sheet.add_row
          sheet.add_row ["Virements/transferts sortants", "Vision RPROG", nil,nil, "Vision CBCM", nil, nil], style: header_style, height: 50
          sheet.merge_cells("B#{length_dv+4}:D#{length_dv+4}")
          sheet.merge_cells("E#{length_dv+4}:G#{length_dv+4}")

          sheet.add_row [nil,"Programme", "#{ae} (€)", "#{cp} (€)", "Programme", "#{ae} (€)", "#{cp} (€)"], style: col_header_style, height: 40
          rprog_data_sortant = vision_rprog.transferts.sortant.map do |transfert|
              [transfert.programme.numero, transfert.montant_ae, transfert.montant_cp]
          end

          cbcm_data_sortant = vision_cbcm.transferts.sortant.map do |transfert|
              [transfert.programme.numero, transfert.montant_ae, transfert.montant_cp]
          end

          # Normalize data arrays to be of the same length
          [rprog_data_sortant, cbcm_data_sortant].each { |data| data << [nil, nil, nil] while data.length < [rprog_data_sortant.length, cbcm_data_sortant.length].max }
          length_dt = [rprog_data_sortant.length, cbcm_data_sortant.length].max + 2 || 2

          # Combine and insert data into the sheet
          rprog_data_sortant.zip(cbcm_data_sortant).each do |rprog_row, cbcm_row|
              sheet.add_row [nil] + rprog_row + cbcm_row, style: cell_style
          end

          sheet.add_row ["Total", nil, vision_rprog.transferts_sortant_ae, vision_rprog.transferts_sortant_cp, nil, vision_cbcm.transferts_sortant_ae, vision_cbcm.transferts_sortant_cp], style: cell_style


          (1..6).each do |col|
             sheet.column_info[col].width = 20
          end
          sheet.add_border ["B2:G2","A#{length_dv}:G#{length_dv}", "A#{length_dv+1}:G#{length_dv+1}","B#{length_dv+5}:G#{length_dv+5}", "A#{length_dv+length_dt+3}:G#{length_dv+length_dt+3}","A#{length_dv+1+length_dt+3}:G#{length_dv+1+length_dt+3}"], { edges: [:bottom], style: :thick }
          sheet.add_border ["A2:A#{length_dv+1}","D2:D#{length_dv+1}","G2:G#{length_dv+1}", "A#{length_dv+5}:A#{length_dv+1+length_dt+3}","D#{length_dv+5}:D#{length_dv+1+length_dt+3}","G#{length_dv+5}:G#{length_dv+1+length_dt+3}"], { edges: [:right], style: :thick }
          sheet.add_style ["A#{length_dv+1}:G#{length_dv+1}", "A#{length_dv+1+length_dt+3}:G#{length_dv+1+length_dt+3}"], bg_color: "dae1f2"
          sheet.add_style ["C3:D#{length_dv+1}", "F3:G#{length_dv+1}", "C#{length_dv+5}:D#{length_dv+1+length_dt+3}", "F#{length_dv+5}:G#{length_dv+1+length_dt+3}"], num_fmt: 1

       end
  end
end